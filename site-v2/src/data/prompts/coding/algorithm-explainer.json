{
  "slug": "algorithm-explainer",
  "category": "coding",
  "title": "Algorithm Explainer",
  "description": "Algorithm Explainer prompt - Master any algorithm with visual explanations, complexity analysis, and real-world use cases. Perfect for interviews and learning.",
  "tags": [
    "ChatGPT prompts",
    "Claude prompts",
    "free prompts",
    "technology prompts"
  ],
  "prompt": "You are a computer science professor and algorithms expert who excels at making complex concepts simple. Explain algorithms with visual representations, real-world analogies, and practical examples.\n\nI need you to explain an algorithm comprehensively:\n\nALGORITHM: [NAME OF ALGORITHM OR PASTE CODE]\nMY LEVEL: [BEGINNER / INTERMEDIATE / ADVANCED]\nPURPOSE: [LEARNING / INTERVIEW PREP / IMPLEMENTATION / OPTIMIZATION]\n\nPlease provide:\n\n1. SIMPLE EXPLANATION\nExplain like I'm a junior developer:\n- What problem does it solve?\n- Real-world analogy (compare to everyday situations)\n- When and why would I use this?\n\n2. VISUAL WALKTHROUGH\nStep-by-step with ASCII art or diagrams:\n```\nInitial State:\n[Visual representation]\n\nStep 1: [What happens]\n[Visual representation]\n\nStep 2: [What happens]\n[Visual representation]\n\n...continue until complete\n```\n\n3. CODE IMPLEMENTATION\nClean, commented code in multiple languages:\n\n**Python:**\n```python\ndef algorithm_name(input):\n    \"\"\"\n    Docstring explaining the algorithm\n    Args: parameter explanations\n    Returns: what it returns\n    Time: O(?)\n    Space: O(?)\n    \"\"\"\n    # Step-by-step implementation with comments\n    # Explain each significant line\n```\n\n**JavaScript:**\n```javascript\nfunction algorithmName(input) {\n    // JavaScript implementation\n    // With clear comments\n}\n```\n\n**Java (if relevant):**\n```java\npublic class Solution {\n    public returnType algorithmName(inputType input) {\n        // Java implementation\n    }\n}\n```\n\n4. COMPLEXITY ANALYSIS\nDetailed Big-O breakdown:\n- **Time Complexity:** O(?) \n  - Best case: O(?) - when [condition]\n  - Average case: O(?) - typical scenario\n  - Worst case: O(?) - when [condition]\n  - Explanation: Why this complexity? Break it down.\n\n- **Space Complexity:** O(?)\n  - Extra space used: [what takes space]\n  - In-place possible? Yes/No because...\n  - Trade-offs: Time vs Space considerations\n\n5. TRACE THROUGH EXAMPLE\nWalk through with actual data:\n```\nInput: [5, 2, 8, 1, 9]\nGoal: [Desired output]\n\nIteration 1:\n- Current state: [5, 2, 8, 1, 9]\n- Operation: [What happens]\n- Result: [New state]\n\nIteration 2:\n- Current state: [...]\n- Operation: [...]\n- Result: [...]\n\nFinal Output: [...]\n```\n\n6. COMMON VARIATIONS\nRelated algorithms and modifications:\n- **Variant 1:** [Name] - Different because...\n- **Variant 2:** [Name] - Use when...\n- **Optimization:** Can be improved by...\n\n7. EDGE CASES & GOTCHAS\nWhat to watch out for:\n□ Empty input: How to handle\n□ Single element: Special case?\n□ Duplicates: Impact on algorithm\n□ Negative numbers: Considerations\n□ Maximum size: Overflow risks\n□ Null/undefined: Validation needed\n\n8. INTERVIEW TIPS\nIf this comes up in interviews:\n- Common questions about this algorithm\n- Follow-up optimizations interviewers expect\n- How to explain your approach\n- What clarifying questions to ask\n- Similar problems that use this pattern\n\n9. REAL-WORLD APPLICATIONS\nWhere this is actually used:\n- **Application 1:** [Company/Product] uses for [purpose]\n- **Application 2:** In [domain] for [solving what]\n- **Application 3:** [Practical example]\n\n10. PRACTICE PROBLEMS\nProblems to master this algorithm:\n- **Easy:** [Problem name] - [LeetCode/HackerRank #]\n- **Medium:** [Problem name] - Focus on [aspect]\n- **Hard:** [Problem name] - Combines with [other concept]\n\n11. COMMON MISTAKES\nAvoid these pitfalls:\n❌ Mistake 1: [What people do wrong]\n✅ Correct: [Right approach]\n\n❌ Mistake 2: [Another common error]\n✅ Correct: [Proper way]\n\n12. OPTIMIZATION TECHNIQUES\nHow to make it faster/better:\n- Technique 1: [Optimization] → Improves to O(?)\n- Technique 2: [Optimization] → Saves space\n- Trade-off: [What you sacrifice]\n\n13. RELATED DATA STRUCTURES\nWorks best with:\n- Data Structure 1: Why it's ideal\n- Data Structure 2: Alternative option\n- Don't use: [Structure] because [reason]\n\n14. QUICK REFERENCE CARD\n```\nAlgorithm: [Name]\nType: [Sorting/Searching/Graph/DP/etc]\nTime: O(?)\nSpace: O(?)\nStable: Yes/No\nIn-place: Yes/No\nBest for: [Use case]\nAvoid when: [Scenario]\nKey insight: [Core concept]\n```\n\nFocus on intuitive understanding over memorization. Use examples I can relate to and build up from simple to complex."
}