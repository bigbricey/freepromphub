{
  "slug": "refactor-legacy",
  "category": "coding",
  "title": "Legacy Code Refactorer",
  "description": "Legacy Code Refactorer prompt - Transform spaghetti code into clean, maintainable architecture. Modernize legacy systems with best practices and design patterns.",
  "tags": [
    "ChatGPT prompts",
    "Claude prompts",
    "free prompts",
    "technology prompts"
  ],
  "prompt": "You are a senior software architect specializing in legacy code modernization. You excel at transforming messy, outdated code into clean, maintainable systems while preserving business logic and improving performance.\n\nI need you to refactor legacy code into modern, clean architecture.\n\nLEGACY CODE CONTEXT:\nLanguage/Framework: [LANGUAGE AND VERSION]\nAge of Codebase: [HOW OLD]\nMain Problems: [SPAGHETTI CODE / NO TESTS / POOR PERFORMANCE / ETC]\nBusiness Constraints: [MUST KEEP WORKING / GRADUAL MIGRATION / ETC]\nTarget Architecture: [MICROSERVICES / CLEAN ARCHITECTURE / ETC]\n\nCurrent Code:\n```[language]\n[PASTE THE LEGACY CODE HERE]\n```\n\nPlease provide:\n\n1. CODE ANALYSIS\nIdentify all issues:\n```\nCRITICAL ISSUES (Fix immediately):\n- Issue 1: [Problem] → Impact: [What breaks]\n- Issue 2: [Problem] → Impact: [Security/Performance]\n\nCODE SMELLS (Refactor soon):\n- Smell 1: [Pattern] → Location: [Where]\n- Smell 2: [Anti-pattern] → Why it's bad: [Reason]\n\nTECHNICAL DEBT:\n- Debt 1: [Missing tests/docs/etc]\n- Debt 2: [Outdated dependencies]\n\nMETRICS:\n- Cyclomatic Complexity: [Current score]\n- Code Duplication: [% duplicated]\n- Test Coverage: [Current %]\n- Coupling: [High/Medium/Low]\n```\n\n2. REFACTORING STRATEGY\nStep-by-step plan:\n```\nPhase 1: STABILIZE (Week 1)\n□ Add tests for current behavior\n□ Set up linting and formatting\n□ Document existing functionality\n□ Create safety net for refactoring\n\nPhase 2: EXTRACT (Week 2-3)\n□ Extract methods from large functions\n□ Separate concerns into modules\n□ Remove duplicate code\n□ Introduce interfaces/contracts\n\nPhase 3: RESTRUCTURE (Week 4-5)\n□ Apply design patterns\n□ Implement dependency injection\n□ Create proper layers\n□ Add proper error handling\n\nPhase 4: OPTIMIZE (Week 6)\n□ Performance improvements\n□ Remove unnecessary code\n□ Update dependencies\n□ Add monitoring\n```\n\n3. REFACTORED CODE\nModern, clean implementation:\n```[language]\n// ============================================\n// CLEAN VERSION WITH PROPER ARCHITECTURE\n// ============================================\n\n// Domain Models\nclass [Entity] {\n    // Business logic here\n}\n\n// Repository Pattern\ninterface [Repository] {\n    // Data access abstraction\n}\n\nclass [RepositoryImpl] implements [Repository] {\n    // Actual data access\n}\n\n// Service Layer\nclass [Service] {\n    constructor(private repository: [Repository]) {\n        // Dependency injection\n    }\n    \n    // Business logic methods\n}\n\n// Controller/Handler\nclass [Controller] {\n    constructor(private service: [Service]) {}\n    \n    // Request handling\n}\n\n// Dependency Injection Container\nconst container = {\n    // Wire up dependencies\n};\n```\n\n4. DESIGN PATTERNS APPLIED\nExplain each pattern used:\n- **Pattern 1:** [Name]\n  - Why used: [Solves what problem]\n  - Implementation: [How applied]\n  \n- **Pattern 2:** [Name]\n  - Why used: [Benefit]\n  - Implementation: [Where in code]\n\n5. BEFORE/AFTER COMPARISON\nShow the transformation:\n```\nBEFORE:\n- Lines of Code: 500\n- Functions: 3 (avg 166 lines each)\n- Cyclomatic Complexity: 45\n- Test Coverage: 0%\n- Dependencies: Hardcoded\n- Error Handling: Try-catch everything\n\nAFTER:\n- Lines of Code: 350\n- Functions: 25 (avg 14 lines each)\n- Cyclomatic Complexity: 8\n- Test Coverage: 85%\n- Dependencies: Injected\n- Error Handling: Specific and meaningful\n```\n\n6. MIGRATION SCRIPT\nSafe transition plan:\n```[language]\n// Step 1: Run in parallel\nclass LegacyAdapter {\n    // Wrap new code to work with old\n}\n\n// Step 2: Feature flag\nif (useNewImplementation) {\n    // New clean code\n} else {\n    // Old code (temporary)\n}\n\n// Step 3: Data migration\nasync function migrateData() {\n    // Move from old structure to new\n}\n\n// Step 4: Cleanup\n// Remove old code after verification\n```\n\n7. UNIT TESTS\nComprehensive test suite:\n```[language]\ndescribe('[Module] Tests', () => {\n    // Setup and teardown\n    \n    test('should handle normal case', () => {\n        // Arrange\n        // Act\n        // Assert\n    });\n    \n    test('should handle edge case', () => {\n        // Test edge scenarios\n    });\n    \n    test('should handle errors gracefully', () => {\n        // Test error scenarios\n    });\n});\n```\n\n8. DOCUMENTATION\nClear documentation for maintenance:\n```markdown\n## Architecture Overview\n[Diagram or description of new structure]\n\n## Key Components\n- Component A: Responsible for...\n- Component B: Handles...\n\n## Data Flow\n1. Request comes in via...\n2. Processed by...\n3. Stored in...\n\n## Configuration\n- Environment variables needed\n- How to set up locally\n- Deployment instructions\n```\n\n9. PERFORMANCE IMPROVEMENTS\nOptimizations made:\n- **Before:** O(n²) nested loops\n  **After:** O(n log n) with better algorithm\n  \n- **Before:** 5 database calls per request\n  **After:** 1 optimized query\n  \n- **Before:** No caching\n  **After:** Redis cache layer\n\n- **Memory usage:** Reduced by 40%\n- **Response time:** Improved by 60%\n\n10. BREAKING CHANGES\nWhat changes for consumers:\n```\nAPI Changes:\n- Endpoint /old/path → /api/v2/resource\n- Parameter oldParam → newParam\n- Response format: XML → JSON\n\nDatabase Changes:\n- Table old_table → Split into table_a, table_b\n- Column changes: [list changes]\n\nConfiguration:\n- New required env vars: [list]\n- Deprecated settings: [list]\n```\n\n11. ROLLBACK PLAN\nIf something goes wrong:\n```bash\n# Quick rollback procedure\n1. Switch feature flag to 'old'\n2. Restore database backup (if needed)\n3. Deploy previous version\n4. Investigate issues in staging\n```\n\n12. MONITORING & METRICS\nTrack the improvements:\n- Response time metrics\n- Error rate monitoring\n- Memory usage tracking\n- Code quality metrics\n- Test coverage reports\n\nPlease ensure the refactored code:\n- Follows SOLID principles\n- Is easily testable\n- Has clear separation of concerns\n- Is well-documented\n- Maintains backward compatibility where needed"
}