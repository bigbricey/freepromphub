{
  "slug": "api-builder",
  "category": "coding",
  "title": "REST API Builder",
  "description": "REST API Builder - Generate complete REST APIs with authentication, validation, error handling, and documentation in any framework.",
  "tags": [
    "ChatGPT prompts",
    "Claude prompts",
    "free prompts",
    "technology prompts"
  ],
  "prompt": "You are an expert backend architect specializing in REST API design. You've built APIs that handle millions of requests per day. Create a complete, production-ready REST API based on my requirements.\n\nAPI REQUIREMENTS:\nResource Name: [e.g., \"users\", \"products\", \"orders\"]\nFramework: [Express/FastAPI/Django/Spring Boot/etc.]\nDatabase: [PostgreSQL/MongoDB/MySQL/etc.]\nAuthentication: [JWT/OAuth/API Key/None]\n\nData Model:\n```\n[DESCRIBE YOUR DATA STRUCTURE]\nExample:\n- id: unique identifier\n- name: string, required\n- email: string, unique, required\n- status: enum (active, inactive)\n- createdAt: timestamp\n```\n\nBusiness Rules:\n[LIST ANY SPECIAL RULES OR CONSTRAINTS]\n\nGenerate a complete REST API with:\n\n1. DATABASE SCHEMA\nCreate the schema/model:\n```[sql/mongoose/prisma]\n// Complete schema definition\n```\n\n2. API ENDPOINTS\nDesign RESTful endpoints following best practices:\n\n```\nGET    /api/v1/[resource]          - List all (with pagination, filtering, sorting)\nGET    /api/v1/[resource]/:id      - Get single resource\nPOST   /api/v1/[resource]          - Create new resource\nPUT    /api/v1/[resource]/:id      - Update entire resource\nPATCH  /api/v1/[resource]/:id      - Partial update\nDELETE /api/v1/[resource]/:id      - Delete resource\n\nAdditional endpoints if needed:\nPOST   /api/v1/[resource]/:id/[action]  - Custom actions\nGET    /api/v1/[resource]/search        - Advanced search\nPOST   /api/v1/[resource]/bulk          - Bulk operations\n```\n\n3. COMPLETE IMPLEMENTATION\n\nModel/Schema Layer:\n```[language]\n// Complete model with validations\n```\n\nController/Route Handler:\n```[language]\n// All CRUD operations with error handling\n\n// GET all with pagination\nasync function getAll(req, res) {\n    // Implementation with pagination, filtering, sorting\n}\n\n// GET by ID\nasync function getById(req, res) {\n    // Implementation with proper error handling\n}\n\n// POST create\nasync function create(req, res) {\n    // Implementation with validation\n}\n\n// PUT update\nasync function update(req, res) {\n    // Full update implementation\n}\n\n// PATCH partial update\nasync function partialUpdate(req, res) {\n    // Partial update implementation\n}\n\n// DELETE\nasync function remove(req, res) {\n    // Soft or hard delete implementation\n}\n```\n\n4. REQUEST VALIDATION\nInput validation for each endpoint:\n```[language]\n// Validation schemas/rules\n```\n\n5. AUTHENTICATION & AUTHORIZATION\nMiddleware for protecting routes:\n```[language]\n// Auth middleware implementation\n// Role-based access control if needed\n```\n\n6. ERROR HANDLING\nCentralized error handling:\n```[language]\n// Error handling middleware\n// Custom error classes\n// Consistent error response format\n```\n\n7. RESPONSE FORMAT\nStandardized response structure:\n```json\n// Success response\n{\n    \"success\": true,\n    \"data\": {},\n    \"meta\": {\n        \"page\": 1,\n        \"limit\": 10,\n        \"total\": 100\n    }\n}\n\n// Error response\n{\n    \"success\": false,\n    \"error\": {\n        \"code\": \"VALIDATION_ERROR\",\n        \"message\": \"Validation failed\",\n        \"details\": []\n    }\n}\n```\n\n8. DATABASE QUERIES\nOptimized queries with indexing:\n```[language]\n// Repository/Service layer\n// Includes transactions where needed\n```\n\n9. MIDDLEWARE STACK\nComplete middleware setup:\n```[language]\n// Rate limiting\n// CORS\n// Security headers\n// Request logging\n// Compression\n```\n\n10. TESTING\nUnit and integration tests:\n```[language]\n// Test suite for all endpoints\n// Mock data and fixtures\n// Edge case testing\n```\n\n11. API DOCUMENTATION\nOpenAPI/Swagger specification:\n```yaml\n# Complete OpenAPI 3.0 spec\n```\n\n12. ENVIRONMENT CONFIGURATION\nEnvironment variables and config:\n```env\n# .env.example\nDATABASE_URL=\nJWT_SECRET=\nPORT=\n```\n\n13. DOCKER SETUP\nContainerization:\n```dockerfile\n# Dockerfile\n# docker-compose.yml\n```\n\n14. DEPLOYMENT READY\nProduction checklist:\n- [ ] Security headers configured\n- [ ] Rate limiting enabled\n- [ ] Input sanitization\n- [ ] SQL injection prevention\n- [ ] Error messages don't leak info\n- [ ] Logging configured\n- [ ] Monitoring setup\n- [ ] Backup strategy\n- [ ] CI/CD pipeline\n\n15. PERFORMANCE OPTIMIZATIONS\n- Database connection pooling\n- Caching strategy (Redis)\n- Query optimization\n- Pagination limits\n- Response compression\n\n16. EXAMPLE REQUESTS\ncURL commands for testing:\n```bash\n# Create\ncurl -X POST http://localhost:3000/api/v1/[resource] \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"field\": \"value\"}'\n\n# Read\ncurl http://localhost:3000/api/v1/[resource]\n\n# Update\ncurl -X PUT http://localhost:3000/api/v1/[resource]/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"field\": \"new value\"}'\n\n# Delete\ncurl -X DELETE http://localhost:3000/api/v1/[resource]/1\n```\n\nProvide production-ready code that can be deployed immediately. Include all necessary files and configurations."
}