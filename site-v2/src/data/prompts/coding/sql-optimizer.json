{
  "slug": "sql-optimizer",
  "category": "coding",
  "title": "SQL Query Optimizer",
  "description": "SQL Query Optimizer - Transform slow queries into lightning-fast ones. Fix N+1 problems, optimize JOINs, and improve database performance by 10-100x.",
  "tags": [
    "ChatGPT prompts",
    "Claude prompts",
    "free prompts",
    "technology prompts"
  ],
  "prompt": "You are a database performance expert with 15+ years optimizing queries for high-traffic applications. You've worked with databases handling billions of records and know every optimization trick.\n\nAnalyze and optimize my SQL query for maximum performance.\n\nDATABASE CONTEXT:\nDatabase System: [PostgreSQL/MySQL/SQLServer/Oracle]\nTable Sizes: [Approximate number of rows per table]\nCurrent Performance: [How long the query takes]\nFrequency: [How often this runs - once/minute/hour/day]\n\nCURRENT QUERY:\n```sql\n[PASTE YOUR SLOW QUERY HERE]\n```\n\nTABLE SCHEMAS:\n```sql\n[PASTE RELEVANT TABLE SCHEMAS WITH COLUMNS AND TYPES]\n```\n\nEXISTING INDEXES:\n```sql\n[LIST CURRENT INDEXES IF KNOWN]\n```\n\nProvide comprehensive optimization:\n\n1. PERFORMANCE ANALYSIS\n- Estimated query complexity: O(?)\n- Main bottlenecks identified:\n  - [ ] Full table scans\n  - [ ] Missing indexes\n  - [ ] Inefficient JOINs\n  - [ ] Subquery problems\n  - [ ] Function calls on columns\n  - [ ] Implicit type conversions\n  \nExplain plan analysis:\n```sql\nEXPLAIN ANALYZE [your query];\n-- Key findings from the plan\n```\n\n2. OPTIMIZED QUERY\nRewrite the query for maximum performance:\n```sql\n-- Optimized version with comments explaining each optimization\n```\n\nPerformance improvement: [Expected X times faster]\n\n3. REQUIRED INDEXES\nCreate these indexes for optimal performance:\n```sql\n-- Index 1: For [purpose]\nCREATE INDEX idx_[name] ON [table]([columns])\nWHERE [condition] -- if partial index needed\nINCLUDE ([columns]) -- if covering index beneficial;\n\n-- Index 2: For [purpose]\nCREATE INDEX idx_[name] ON [table]([columns]);\n\n-- Analyze impact\nANALYZE [table];\n```\n\nWhy each index helps:\n- Index 1: [Explanation of how it speeds up the query]\n- Index 2: [Explanation]\n\n4. ALTERNATIVE APPROACHES\nIf the query is fundamentally inefficient, here are better approaches:\n\nOption A: Using CTEs\n```sql\nWITH cte_name AS (\n    -- More efficient approach\n)\nSELECT ...\n```\n\nOption B: Using temporary tables\n```sql\n-- Create temp table approach\n```\n\nOption C: Denormalization\n```sql\n-- If applicable, suggest denormalized structure\n```\n\n5. QUERY BREAKDOWN\nStep-by-step optimization:\n\nOriginal problem:\n```sql\n-- Problematic part\n```\n\nStep 1 fix:\n```sql\n-- First optimization\n```\n\nStep 2 fix:\n```sql\n-- Second optimization\n```\n\nFinal result:\n```sql\n-- Fully optimized\n```\n\n6. DATABASE CONFIGURATION\nTune these database parameters:\n```ini\n# For PostgreSQL\nwork_mem = [recommended value]\nshared_buffers = [recommended value]\neffective_cache_size = [recommended value]\n\n# For MySQL\ninnodb_buffer_pool_size = [recommended value]\njoin_buffer_size = [recommended value]\n```\n\n7. MONITORING QUERIES\nQueries to monitor performance:\n```sql\n-- Check query execution time\n-- Monitor index usage\n-- Identify slow queries\n```\n\n8. CACHING STRATEGY\nIf this query runs frequently:\n- Materialized view approach:\n```sql\nCREATE MATERIALIZED VIEW mv_[name] AS\n[optimized query];\n\n-- Refresh strategy\nREFRESH MATERIALIZED VIEW CONCURRENTLY mv_[name];\n```\n\n- Application-level caching:\n  - Cache key: [suggestion]\n  - TTL: [recommended seconds]\n  - Invalidation strategy: [when to clear]\n\n9. PREVENTION TIPS\nAvoid these common mistakes:\n- Never: [Common bad pattern]\n  Instead: [Better pattern]\n- Never: [Another bad pattern]\n  Instead: [Better pattern]\n\n10. SCALING CONSIDERATIONS\nWhen your data grows 10x:\n- Partitioning strategy:\n```sql\n-- Partition tables if needed\n```\n- Sharding approach: [if applicable]\n- Read replica usage: [if applicable]\n\n11. QUICK WINS\nImmediate improvements (no schema changes):\n1. [Quick fix 1]\n2. [Quick fix 2]\n3. [Quick fix 3]\n\n12. TESTING THE OPTIMIZATION\nBenchmark your improvements:\n```sql\n-- Before optimization\nEXPLAIN (ANALYZE, BUFFERS) [original query];\n\n-- After optimization  \nEXPLAIN (ANALYZE, BUFFERS) [optimized query];\n\n-- Compare execution time, buffer hits, etc.\n```\n\n13. ROLLBACK PLAN\nIf optimization causes issues:\n```sql\n-- Commands to safely rollback changes\nDROP INDEX IF EXISTS idx_[name];\n-- Restore original query in application\n```\n\nProvide specific, actionable optimizations. Focus on changes that give the biggest performance gains with the least effort."
}