{
  "slug": "python-automation",
  "category": "coding",
  "title": "Python Automation Script",
  "description": "Python Automation Script prompt - Generate Python scripts to automate any repetitive task. Web scraping, file processing, API calls, and more.",
  "tags": [
    "ChatGPT prompts",
    "Claude prompts",
    "free prompts",
    "technology prompts"
  ],
  "prompt": "You are a Python automation expert with deep knowledge of scripting, web scraping, API integration, and process automation. Create robust, efficient scripts that handle errors gracefully and save hours of manual work.\n\nI need a Python automation script for the following task:\n\nTASK DETAILS:\nWhat to Automate: [DESCRIBE THE MANUAL TASK]\nInput Source: [FILES / WEB / API / DATABASE]\nOutput Required: [WHAT THE SCRIPT SHOULD PRODUCE]\nFrequency: [ONE-TIME / DAILY / WEEKLY / TRIGGERED]\nCurrent Manual Process: [HOW IT'S DONE NOW]\nVolume: [HOW MUCH DATA/HOW MANY ITEMS]\n\nPlease create:\n\n1. COMPLETE PYTHON SCRIPT\nFull working implementation:\n```python\n#!/usr/bin/env python3\n\"\"\"\nScript: [script_name].py\nPurpose: [Brief description]\nAuthor: Generated by AI\nDate: [Current date]\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom datetime import datetime\n# Additional imports based on task\n\n# Configuration\nCONFIG = {\n    'input_path': '',\n    'output_path': '',\n    'api_key': os.getenv('API_KEY', ''),\n    # Other config variables\n}\n\n# Set up logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('automation.log'),\n        logging.StreamHandler()\n    ]\n)\nlogger = logging.getLogger(__name__)\n\nclass [TaskAutomator]:\n    \"\"\"Main automation class\"\"\"\n    \n    def __init__(self, config):\n        self.config = config\n        self.results = []\n        \n    def validate_inputs(self):\n        \"\"\"Validate all inputs before processing\"\"\"\n        # Validation logic\n        pass\n    \n    def process_single_item(self, item):\n        \"\"\"Process a single item/record\"\"\"\n        try:\n            # Processing logic\n            return processed_item\n        except Exception as e:\n            logger.error(f\"Error processing {item}: {str(e)}\")\n            return None\n    \n    def run(self):\n        \"\"\"Main execution method\"\"\"\n        logger.info(\"Starting automation...\")\n        \n        # Main automation logic\n        \n        logger.info(f\"Completed. Processed {len(self.results)} items\")\n        return self.results\n\ndef main():\n    \"\"\"Entry point\"\"\"\n    try:\n        automator = [TaskAutomator](CONFIG)\n        automator.validate_inputs()\n        results = automator.run()\n        \n        # Output results\n        \n    except KeyboardInterrupt:\n        logger.info(\"Process interrupted by user\")\n        sys.exit(0)\n    except Exception as e:\n        logger.error(f\"Fatal error: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n2. REQUIREMENTS FILE\nDependencies needed:\n```txt\n# requirements.txt\nrequests>=2.28.0  # For API calls\nbeautifulsoup4>=4.11.0  # For web scraping\npandas>=1.5.0  # For data manipulation\npython-dotenv>=0.19.0  # For environment variables\n# Add other dependencies based on task\n```\n\n3. ENVIRONMENT SETUP\nConfiguration file:\n```bash\n# .env file\nAPI_KEY=your_api_key_here\nDATABASE_URL=your_database_url\nEMAIL_PASSWORD=your_app_password\n# Other sensitive data\n```\n\n4. SCHEDULING SETUP\nFor automated runs:\n\n**Option A: Cron (Linux/Mac)**\n```bash\n# Add to crontab -e\n# Run daily at 2 AM\n0 2 * * * /usr/bin/python3 /path/to/script.py\n\n# Run every hour\n0 * * * * /usr/bin/python3 /path/to/script.py\n\n# Run Monday-Friday at 9 AM\n0 9 * * 1-5 /usr/bin/python3 /path/to/script.py\n```\n\n**Option B: Task Scheduler (Windows)**\n```powershell\n# PowerShell script to create scheduled task\n$action = New-ScheduledTaskAction -Execute \"python.exe\" -Argument \"C:\\path\\to\\script.py\"\n$trigger = New-ScheduledTaskTrigger -Daily -At 2:00AM\nRegister-ScheduledTask -TaskName \"MyAutomation\" -Action $action -Trigger $trigger\n```\n\n**Option C: Python Scheduler**\n```python\n# scheduler.py\nimport schedule\nimport time\n\ndef run_automation():\n    exec(open('your_script.py').read())\n\nschedule.every().day.at(\"02:00\").do(run_automation)\nschedule.every().monday.at(\"09:00\").do(run_automation)\n\nwhile True:\n    schedule.run_pending()\n    time.sleep(60)\n```\n\n5. ERROR HANDLING\nRobust error management:\n```python\n# Error handling patterns\ntry:\n    # Risky operation\nexcept ConnectionError:\n    # Retry logic\n    for attempt in range(3):\n        time.sleep(2 ** attempt)\n        # Retry\nexcept FileNotFoundError:\n    # Create file/directory\nexcept Exception as e:\n    # Log and continue or fail gracefully\n    logger.error(f\"Unexpected error: {str(e)}\")\n    # Send alert email/notification\n```\n\n6. MONITORING & ALERTS\nTrack automation health:\n```python\ndef send_alert(subject, message):\n    \"\"\"Send email alert on failure\"\"\"\n    # Email sending logic\n    \ndef check_health():\n    \"\"\"Verify automation is working\"\"\"\n    # Health check logic\n```\n\n7. PERFORMANCE OPTIMIZATION\n- Use generators for large datasets\n- Implement multiprocessing for CPU-bound tasks\n- Use async/await for I/O-bound operations\n- Batch API requests\n- Cache frequently accessed data\n\n8. TESTING SUITE\n```python\n# test_automation.py\nimport unittest\nfrom your_script import TaskAutomator\n\nclass TestAutomation(unittest.TestCase):\n    def test_single_item_processing(self):\n        # Test logic\n        pass\n    \n    def test_error_handling(self):\n        # Test error cases\n        pass\n```\n\n9. DEPLOYMENT INSTRUCTIONS\nStep-by-step setup:\n1. Clone/download script\n2. Install Python 3.8+\n3. pip install -r requirements.txt\n4. Configure .env file\n5. Test with: python script.py --test\n6. Deploy with scheduler\n7. Monitor logs\n\n10. COMMON MODIFICATIONS\nEasy tweaks for different use cases:\n- Change input source (file â†’ API)\n- Adjust processing frequency\n- Add data validation rules\n- Integrate with different services\n- Scale for larger datasets\n\nPlease ensure the script is:\n- Production-ready with proper error handling\n- Well-documented for maintenance\n- Efficient for the data volume specified\n- Secure (no hardcoded credentials)\n- Easy to modify and extend"
}