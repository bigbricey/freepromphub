{
  "slug": "react-component",
  "category": "coding",
  "title": "React Component Generator",
  "description": "React Component Generator prompt - Create production-ready React components with TypeScript, hooks, and testing. Build faster with AI.",
  "tags": [
    "ChatGPT prompts",
    "Claude prompts",
    "free prompts",
    "technology prompts"
  ],
  "prompt": "You are a senior React developer with expertise in TypeScript, modern React patterns, and testing. Create production-ready components that follow best practices and are ready to ship.\n\nI need you to generate a complete React component based on my requirements.\n\nCOMPONENT REQUIREMENTS:\nComponent Name: [COMPONENT NAME]\nPurpose: [WHAT THIS COMPONENT DOES]\nProps Needed: [LIST KEY PROPS]\nState Management: [LOCAL STATE / CONTEXT / REDUX]\nStyling Approach: [CSS MODULES / STYLED-COMPONENTS / TAILWIND]\nKey Features: [LIST MAIN FEATURES]\n\nPlease generate:\n\n1. TYPESCRIPT INTERFACE\nDefine all props and types:\n```typescript\ninterface [ComponentName]Props {\n  // All props with proper types\n  // Include JSDoc comments for complex props\n}\n\n// Additional types/interfaces if needed\n```\n\n2. MAIN COMPONENT\nFull component implementation:\n```tsx\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\n// Additional imports\n\nconst [ComponentName]: React.FC<[ComponentName]Props> = ({\n  // Destructured props with defaults\n}) => {\n  // State hooks\n  \n  // Effects\n  \n  // Callbacks and memoized values\n  \n  // Event handlers\n  \n  return (\n    // JSX with proper semantic HTML\n    // Accessibility attributes (aria-*, role, etc.)\n  );\n};\n\nexport default [ComponentName];\n```\n\n3. STYLING\nComponent styles using the specified approach:\n```[css/scss/styled]\n// Mobile-first responsive styles\n// Proper CSS organization\n// Animation/transitions if needed\n```\n\n4. CUSTOM HOOKS (if applicable)\nExtract reusable logic:\n```typescript\nconst use[HookName] = (params) => {\n  // Hook implementation\n  return { /* values */ };\n};\n```\n\n5. UNIT TESTS\nComprehensive test suite:\n```typescript\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport [ComponentName] from './[ComponentName]';\n\ndescribe('[ComponentName]', () => {\n  // Test default rendering\n  it('renders correctly with default props', () => {\n    // Test implementation\n  });\n  \n  // Test user interactions\n  it('handles [interaction] correctly', async () => {\n    // Test implementation\n  });\n  \n  // Test edge cases\n  it('handles edge case when [condition]', () => {\n    // Test implementation\n  });\n  \n  // Test accessibility\n  it('is accessible', () => {\n    // Test ARIA attributes\n  });\n});\n```\n\n6. STORYBOOK STORY (bonus)\nFor component documentation:\n```typescript\nimport type { Meta, StoryObj } from '@storybook/react';\nimport [ComponentName] from './[ComponentName]';\n\nconst meta: Meta<typeof [ComponentName]> = {\n  title: 'Components/[ComponentName]',\n  component: [ComponentName],\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    // Default props\n  },\n};\n\nexport const [Variant]: Story = {\n  args: {\n    // Variant props\n  },\n};\n```\n\n7. USAGE EXAMPLE\nHow to use in a parent component:\n```tsx\nimport [ComponentName] from './components/[ComponentName]';\n\nfunction App() {\n  return (\n    <[ComponentName]\n      // Props with real values\n    />\n  );\n}\n```\n\n8. PERFORMANCE OPTIMIZATIONS\n- What's memoized and why\n- When to use React.memo()\n- Optimal re-render strategy\n- Bundle size considerations\n\n9. ACCESSIBILITY CHECKLIST\n□ Keyboard navigation works\n□ Screen reader friendly\n□ ARIA labels present\n□ Focus management correct\n□ Color contrast passes WCAG\n□ Responsive on all devices\n\n10. COMMON VARIATIONS\nAdditional versions you might need:\n- Loading state version\n- Error state version\n- Empty state version\n- Mobile-specific version\n\nPlease ensure the component:\n- Uses latest React 18+ features\n- Follows React best practices\n- Is fully typed with TypeScript\n- Handles all edge cases\n- Is production-ready"
}